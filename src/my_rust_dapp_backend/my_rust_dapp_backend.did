type Transaction = record {
  amount : nat64;
  timestamp : nat64;
  transaction_type : text;
  tx_hash : opt text;
  ckbtc_address : opt text;
};

type Winning = record {
  amount : nat64;
  timestamp : nat64;
  round_id : nat64;
};

type User = record {
  balance : nat64;
  transaction_history : vec Transaction;
  winning_history : vec Winning;
  deposit_account : Account;
  principal_text : text;
  last_balance_check : nat64;
};

type Round = record {
  id : nat64;
  participants : vec principal;
  prize_pool : nat64;
  start_time : nat64;
  end_time : nat64;
  winners : vec principal;
};

type SystemStats = record {
  total_rounds : nat64;
  total_bets : nat64;
  total_winnings : nat64;
  active_users : nat64;
  total_ckbtc_deposits : nat64;
};

type CkBtcDeposit = record {
  amount : nat64;
  tx_hash : text;
  timestamp : nat64;
  status : text;
};

// ICRC-1 types for ckBTC integration
type Account = record {
  owner : principal;
  subaccount : opt vec nat8;
};

type TransferArgs = record {
  to : Account;
  amount : nat64;
  fee : opt nat64;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
};

type TransferError = variant {
  BadFee : record { expected_fee : nat64 };
  BadBurn : record { min_burn_amount : nat64 };
  InsufficientFunds : record { balance : nat64 };
  TooOld;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat64 };
  TemporarilyUnavailable;
  GenericError : record { error_code : nat64; message : text };
};

type TransferResult = variant {
  Ok : nat64;
  Err : TransferError;
};

service : {
  initialize_auth : () -> ();
  create_user : (text) -> ();
  deposit : (nat64) -> ();
  place_bet : (text) -> ();
  update_balance : (text) -> ();
  update_balance_from_principal : (text) -> ();
  withdraw_balance : (text, nat64) -> ();
  trigger_draw : () -> ();
  get_user : (principal) -> (opt User) query;
  get_user_deposit_account : (text) -> (opt Account) query;
  get_round : () -> (Round) query;
  get_stats : () -> (SystemStats) query;
  get_canister_address : () -> (text) query;
  record_ckbtc_deposit : (text, nat64) -> ();
  receive_ckbtc_transfer : (nat64, text) -> (variant { Ok : text; Err : text });
  get_user_ckbtc_balance : (principal) -> (nat);
  check_ckbtc_deposits : () -> ();
  get_user_ckbtc_deposits : (principal) -> (vec CkBtcDeposit) query;
  get_pending_ckbtc_deposits : () -> (vec CkBtcDeposit) query;
  confirm_ckbtc_deposit : (text) -> ();
  get_ckbtc_canister_id : () -> (text) query;
  get_last_error_log : () -> (opt text) query;
  get_user_debug_info : (principal) -> (text) query;
  get_all_users_debug : () -> (vec text) query;
  get_ckbtc_account_balance : (text, opt text) -> (variant { Ok : nat64; Err : text });
  get_user_all_balances : (text) -> (variant { Ok : vec record { text; nat64 }; Err : text });
  // Treasury related methods
  get_treasury_balance : () -> (variant { Ok : nat64; Err : text });
  get_treasury_account : () -> (Account) query;
  get_treasury_info : () -> (variant { Ok : text; Err : text }) query;
  admin_transfer_to_treasury : (text, nat64) -> (variant { Ok : text; Err : text });
  // Admin consolidation methods
  auto_consolidate_all_accounts : () -> (variant { Ok : text; Err : text });
  // Manual trigger methods
  manual_trigger_round_auto_start : () -> (variant { Ok : text; Err : text });
};
